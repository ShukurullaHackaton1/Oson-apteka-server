// services/osonKassaSync.js
const axios = require("axios");
const { Product, SyncStatus, Supplier } = require("../models");
const cron = require("node-cron");

class OsonKassaSyncService {
  constructor() {
    this.baseURL = "https://osonkassa.uz/api";
    this.isRunning = false;
    this.pageSize = 100;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API
  async fetchPage(pageNumber) {
    try {
      const response = await axios.post(
        `${this.baseURL}/report/inventory/remains`,
        {
          pageNumber,
          pageSize: this.pageSize,
          searchText: "",
          sortOrders: [
            {
              property: "product",
              direction: "asc",
            },
          ],
          source: 0,
          onlyActiveItems: true,
          manufacturerIds: [],
        },
        {
          headers: {
            Authorization:
              "Bearer eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ3ZWIuYXBpIiwiaXNzIjoiaHR0cHM6Ly9vc29ua2Fzc2EudXovd2ViLmFwaSIsImV4cCI6MTc1NjEwNjE1MywiaWF0IjoxNzU2MDIzMzUzLCJVc2VybmFtZSI6ImFwdGVrYSIsIlVzZXJJZCI6IjgxZWViMzFmLTFiZWMtNGM3MC1iOGJmLTYzMjk4MTdiY2NjZSIsIlRlbmFudElkIjoiYmlvZmFybXMiLCJwZXJtaXNzaW9ucyI6InNlY3VyaXR5Iiwicm9sZSI6IiIsIm5iZiI6MTc1NjAyMzM1M30.nBzaFgdk1S_fZiUYofUknvB2m-yAQPSWnNAKut9oWr8",
          },
          timeout: 30000,
        }
      );

      return response.data.page;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}:`, error);
      throw error;
    }
  }

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  async fullSync() {
    if (this.isRunning) {
      console.log("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
      return;
    }

    this.isRunning = true;
    let syncStatus = (await SyncStatus.findOne()) || new SyncStatus();

    try {
      console.log("üîÑ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Oson Kassa...");
      syncStatus.status = "syncing";
      syncStatus.lastSyncDate = new Date();
      await syncStatus.save();

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const firstPage = await this.fetchPage(1);
      const totalPages = firstPage.totalPages;
      const totalCount = firstPage.totalCount;

      console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}, —Ç–æ–≤–∞—Ä–æ–≤: ${totalCount}`);

      syncStatus.totalPages = totalPages;
      syncStatus.totalRecords = totalCount;
      await syncStatus.save();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      for (let page = 1; page <= totalPages; page++) {
        console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}/${totalPages}`);

        const pageData = await this.fetchPage(page);
        await this.processPageData(pageData.items);

        syncStatus.lastPageSynced = page;
        await syncStatus.save();

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      await this.updateSupplierStatistics();

      syncStatus.status = "completed";
      syncStatus.nextSyncScheduled = new Date(Date.now() + 10 * 60 * 1000); // +10 –º–∏–Ω—É—Ç
      await syncStatus.save();

      console.log("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Socket.io
      if (global.io) {
        global.io.emit("sync_completed", {
          totalPages,
          totalRecords: totalCount,
          timestamp: new Date(),
        });
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
      syncStatus.status = "error";
      syncStatus.errorMessage = error.message;
      await syncStatus.save();

      if (global.io) {
        global.io.emit("sync_error", {
          error: error.message,
          timestamp: new Date(),
        });
      }
    } finally {
      this.isRunning = false;
    }
  }

  // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
  async incrementalSync() {
    if (this.isRunning) {
      console.log("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
      return;
    }

    this.isRunning = true;
    const syncStatus = await SyncStatus.findOne();

    if (!syncStatus || !syncStatus.lastPageSynced) {
      console.log("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è");
      return await this.fullSync();
    }

    try {
      console.log("üîÑ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...");

      const pageData = await this.fetchPage(syncStatus.lastPageSynced);
      await this.processPageData(pageData.items, true); // true = incremental update

      syncStatus.lastSyncDate = new Date();
      syncStatus.status = "completed";
      syncStatus.nextSyncScheduled = new Date(Date.now() + 10 * 60 * 1000);
      await syncStatus.save();

      console.log("‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    } finally {
      this.isRunning = false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async processPageData(items, isIncremental = false) {
    for (const item of items) {
      try {
        const productData = {
          erpId: item.id,
          branchId: item.branchId,
          branch: item.branch,
          productId: item.productId,
          batchId: item.batchId,
          code: item.code,
          product: item.product,
          manufacturer: item.manufacturer,
          country: item.country,
          internationalName: item.internationalName,
          pharmGroup: item.pharmGroup,
          category: item.category,
          unit: item.unit,
          pieceCount: item.pieceCount,
          barcode: item.barcode,
          mxik: item.mxik,
          quantity: item.quantity,
          quantities: item.quantities,
          bookedQuantity: item.bookedQuantity,
          buyPrice: item.buyPrice,
          salePrice: item.salePrice,
          vat: item.vat,
          markup: item.markup,
          series: item.series,
          shelfLife: item.shelfLife ? new Date(item.shelfLife) : null,
          supplyQuantity: item.supplyQuantity,
          supplyDate: item.supplyDate ? new Date(item.supplyDate) : null,
          supplier: item.supplier,
          location: item.location,
          temperature: item.temperature,
          isActive: true,
        };

        if (isIncremental) {
          // –ü—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
          await Product.findOneAndUpdate({ erpId: item.id }, productData, {
            upsert: true,
            new: true,
          });
        } else {
          // –ü—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
          await Product.findOneAndUpdate({ erpId: item.id }, productData, {
            upsert: true,
            new: true,
            overwrite: true,
          });
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${item.id}:`, error);
      }
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  async updateSupplierStatistics() {
    try {
      const suppliers = await Product.distinct("supplier");

      for (const supplierName of suppliers) {
        if (!supplierName) continue;

        const stats = await Product.aggregate([
          { $match: { supplier: supplierName } },
          {
            $group: {
              _id: null,
              totalProducts: { $sum: 1 },
              branches: { $addToSet: "$branch" },
            },
          },
        ]);

        if (stats.length > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫
          let supplier = await Supplier.findOne({ name: supplierName });

          if (!supplier) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä–æ–ª–µ–º
            const username = supplierName.toLowerCase().replace(/\s+/g, "_");
            const password = Math.random().toString(36).slice(-8);

            supplier = new Supplier({
              name: supplierName,
              username,
              password, // –±—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω –≤ pre-save hook
            });
          }

          supplier.statistics = {
            totalProducts: stats[0].totalProducts,
            totalBranches: stats[0].branches.length,
            lastSync: new Date(),
          };

          await supplier.save();
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", error);
    }
  }

  // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  startScheduler() {
    // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.fullSync();

    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    cron.schedule("*/10 * * * *", () => {
      console.log("‚è∞ –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
      this.incrementalSync();
    });

    console.log("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)");
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async getSyncStatus() {
    const status = await SyncStatus.findOne();
    const productCount = await Product.countDocuments();
    const supplierCount = await Supplier.countDocuments();

    return {
      ...status?.toObject(),
      currentProductCount: productCount,
      currentSupplierCount: supplierCount,
    };
  }
}

module.exports = new OsonKassaSyncService();
