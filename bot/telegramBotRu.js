// bot/telegramBotRu.js
const TelegramBot = require("node-telegram-bot-api");
const { Doctor, Product, Sale, Supplier } = require("../models");

class PharmacyBotRu {
  constructor() {
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
      polling: true,
    });
    this.userStates = new Map();
    this.setupHandlers();
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ Start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;

      await this.bot.sendMessage(
        chatId,
        "üè• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ø—Ç–µ–∫–æ–π!\n\n" +
          "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ö–æ–¥–∞:",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä", callback_data: "login_doctor" }],
              [{ text: "üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫", callback_data: "login_supplier" }],
            ],
          },
        }
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    this.bot.on("callback_query", async (query) => {
      const chatId = query.message.chat.id;
      const data = query.data;

      if (data === "login_doctor") {
        this.userStates.set(chatId, { type: "doctor", step: "username" });
        await this.bot.sendMessage(
          chatId,
          "üë®‚Äç‚öïÔ∏è –í—Ö–æ–¥ –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:"
        );
      } else if (data === "login_supplier") {
        this.userStates.set(chatId, { type: "supplier", step: "username" });
        await this.bot.sendMessage(
          chatId,
          "üì¶ –í—Ö–æ–¥ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:"
        );
      } else if (data.startsWith("page_")) {
        await this.handlePagination(chatId, data);
      } else if (data.startsWith("branch_")) {
        await this.showBranchProducts(chatId, data);
      }

      await this.bot.answerCallbackQuery(query.id);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on("message", async (msg) => {
      const chatId = msg.chat.id;
      const text = msg.text;

      if (!text || text.startsWith("/")) return;

      const userState = this.userStates.get(chatId);

      if (userState) {
        await this.handleLogin(chatId, text, userState);
      } else {
        await this.handleMainMenu(chatId, text);
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞
  async handleLogin(chatId, text, userState) {
    if (userState.type === "doctor") {
      if (userState.step === "username") {
        userState.username = text;
        userState.step = "password";
        this.userStates.set(chatId, userState);
        await this.bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
      } else if (userState.step === "password") {
        const doctor = await Doctor.findOne({
          username: userState.username,
          isActive: true,
        });

        if (!doctor || !(await doctor.comparePassword(text))) {
          this.userStates.delete(chatId);
          return await this.bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start"
          );
        }

        doctor.telegramId = chatId.toString();
        doctor.lastLogin = new Date();
        await doctor.save();

        this.userStates.delete(chatId);
        await this.showDoctorMenu(chatId, doctor);
      }
    } else if (userState.type === "supplier") {
      if (userState.step === "username") {
        userState.username = text;
        userState.step = "password";
        this.userStates.set(chatId, userState);
        await this.bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
      } else if (userState.step === "password") {
        const supplier = await Supplier.findOne({
          username: userState.username,
          isActive: true,
        });

        if (!supplier || !(await supplier.comparePassword(text))) {
          this.userStates.delete(chatId);
          return await this.bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start"
          );
        }

        supplier.telegramId = chatId.toString();
        supplier.lastLogin = new Date();
        await supplier.save();

        this.userStates.delete(chatId);
        await this.showSupplierMenu(chatId, supplier);
      }
    }
  }

  // –ú–µ–Ω—é –¥–æ–∫—Ç–æ—Ä–∞
  async showDoctorMenu(chatId, doctor) {
    await this.bot.sendMessage(
      chatId,
      `‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –î–æ–∫—Ç–æ—Ä ${doctor.firstName} ${doctor.lastName}!\n\n` +
        `üè• –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${doctor.specialization || "–û–±—â–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"}\n` +
        `üîë –ö–æ–¥: ${doctor.adminCode}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: {
          keyboard: [
            ["üìã –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["‚ûï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞", "üìà –û—Ç—á–µ—Ç—ã"],
            ["‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"],
          ],
          resize_keyboard: true,
        },
      }
    );
  }

  // –ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  async showSupplierMenu(chatId, supplier) {
    await this.bot.sendMessage(
      chatId,
      `‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${supplier.name}!\n\n` +
        `üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${supplier.statistics.totalProducts}\n` +
        `üè™ –§–∏–ª–∏–∞–ª–æ–≤: ${supplier.statistics.totalBranches}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: {
          keyboard: [
            ["üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", "üìä –û—Å—Ç–∞—Ç–∫–∏"],
            ["üè™ –ü–æ —Ñ–∏–ª–∏–∞–ª–∞–º", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"],
          ],
          resize_keyboard: true,
        },
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  async handleMainMenu(chatId, text) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const doctor = await Doctor.findOne({ telegramId: chatId.toString() });
    const supplier = await Supplier.findOne({ telegramId: chatId.toString() });

    if (!doctor && !supplier) {
      return await this.bot.sendMessage(
        chatId,
        "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start"
      );
    }

    if (supplier) {
      await this.handleSupplierMenu(chatId, text, supplier);
    } else if (doctor) {
      await this.handleDoctorMenu(chatId, text, doctor);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  async handleSupplierMenu(chatId, text, supplier) {
    switch (text) {
      case "üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã":
        await this.showSupplierProducts(chatId, supplier, 1);
        break;

      case "üìä –û—Å—Ç–∞—Ç–∫–∏":
        await this.showProductStatistics(chatId, supplier);
        break;

      case "üè™ –ü–æ —Ñ–∏–ª–∏–∞–ª–∞–º":
        await this.showBranchList(chatId, supplier);
        break;

      case "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await this.showSupplierStatistics(chatId, supplier);
        break;

      case "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞":
        await this.bot.sendMessage(
          chatId,
          "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        );
        this.userStates.set(chatId, {
          type: "search_product",
          supplierId: supplier._id,
        });
        break;

      case "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
        await this.bot.sendMessage(chatId, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
        setTimeout(async () => {
          await this.bot.sendMessage(chatId, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
        }, 1000);
        break;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async showSupplierProducts(chatId, supplier, page = 1) {
    const perPage = 10;
    const skip = (page - 1) * perPage;

    const products = await Product.find({ supplier: supplier.name })
      .sort({ product: 1 })
      .skip(skip)
      .limit(perPage);

    const totalProducts = await Product.countDocuments({
      supplier: supplier.name,
    });
    const totalPages = Math.ceil(totalProducts / perPage);

    if (products.length === 0) {
      return await this.bot.sendMessage(
        chatId,
        "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ."
      );
    }

    let message = `üì¶ *–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${totalPages}):*\n\n`;

    products.forEach((product, index) => {
      const num = skip + index + 1;
      message += `${num}. *${product.product}*\n`;
      message += `   üìç –§–∏–ª–∏–∞–ª: ${product.branch}\n`;
      message += `   üìä –û—Å—Ç–∞—Ç–æ–∫: ${product.quantity} ${product.unit}\n`;
      message += `   üí∞ –¶–µ–Ω–∞: ${product.salePrice?.toLocaleString(
        "ru-RU"
      )} —Å—É–º\n\n`;
    });

    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const keyboard = [];
    const paginationRow = [];

    if (page > 1) {
      paginationRow.push({
        text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data: `page_supplier_${page - 1}`,
      });
    }

    paginationRow.push({
      text: `${page}/${totalPages}`,
      callback_data: "current_page",
    });

    if (page < totalPages) {
      paginationRow.push({
        text: "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
        callback_data: `page_supplier_${page + 1}`,
      });
    }

    if (paginationRow.length > 0) {
      keyboard.push(paginationRow);
    }

    await this.bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤
  async showProductStatistics(chatId, supplier) {
    const stats = await Product.aggregate([
      { $match: { supplier: supplier.name } },
      {
        $group: {
          _id: "$branch",
          totalProducts: { $sum: 1 },
          totalQuantity: { $sum: "$quantity" },
          totalValue: { $sum: { $multiply: ["$quantity", "$salePrice"] } },
        },
      },
      { $sort: { totalValue: -1 } },
    ]);

    let message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º:*\n\n";

    stats.forEach((stat, index) => {
      message += `${index + 1}. *${stat._id}*\n`;
      message += `   üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${stat.totalProducts}\n`;
      message += `   üìä –û–±—â–µ–µ –∫–æ–ª-–≤–æ: ${stat.totalQuantity}\n`;
      message += `   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${stat.totalValue.toLocaleString(
        "ru-RU"
      )} —Å—É–º\n\n`;
    });

    await this.bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
  async showBranchList(chatId, supplier) {
    const branches = await Product.distinct("branch", {
      supplier: supplier.name,
    });

    if (branches.length === 0) {
      return await this.bot.sendMessage(chatId, "üè™ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤.");
    }

    const keyboard = branches.map((branch) => [
      {
        text: `üè™ ${branch}`,
        callback_data: `branch_${branch.substring(0, 20)}`,
      },
    ]);

    await this.bot.sendMessage(
      chatId,
      "üè™ *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:*",
      {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: keyboard,
        },
      }
    );
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∏–ª–∏–∞–ª–µ
  async showBranchProducts(chatId, data) {
    const branchName = data.replace("branch_", "");

    const products = await Product.find({
      branch: new RegExp(branchName, "i"),
    }).limit(10);

    let message = `üè™ *–¢–æ–≤–∞—Ä—ã –≤ —Ñ–∏–ª–∏–∞–ª–µ:*\n\n`;

    products.forEach((product, index) => {
      message += `${index + 1}. *${product.product}*\n`;
      message += `   üìä –û—Å—Ç–∞—Ç–æ–∫: ${product.quantity} ${product.unit}\n`;
      message += `   üí∞ –¶–µ–Ω–∞: ${product.salePrice?.toLocaleString(
        "ru-RU"
      )} —Å—É–º\n\n`;
    });

    await this.bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  async handlePagination(chatId, data) {
    const parts = data.split("_");
    const type = parts[1];
    const page = parseInt(parts[2]);

    if (type === "supplier") {
      const supplier = await Supplier.findOne({
        telegramId: chatId.toString(),
      });
      if (supplier) {
        await this.showSupplierProducts(chatId, supplier, page);
      }
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  async showSupplierStatistics(chatId, supplier) {
    const today = new Date();
    const startOfDay = new Date(today.setHours(0, 0, 0, 0));

    const stats = await Product.aggregate([
      { $match: { supplier: supplier.name } },
      {
        $group: {
          _id: null,
          totalProducts: { $sum: 1 },
          totalQuantity: { $sum: "$quantity" },
          totalValue: { $sum: { $multiply: ["$quantity", "$salePrice"] } },
          avgPrice: { $avg: "$salePrice" },
          branches: { $addToSet: "$branch" },
        },
      },
    ]);

    const stat = stats[0] || {
      totalProducts: 0,
      totalQuantity: 0,
      totalValue: 0,
      avgPrice: 0,
      branches: [],
    };

    const message =
      `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n` +
      `üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${stat.totalProducts}\n` +
      `üìä –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${stat.totalQuantity}\n` +
      `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stat.totalValue.toLocaleString("ru-RU")} —Å—É–º\n` +
      `üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(stat.avgPrice).toLocaleString(
        "ru-RU"
      )} —Å—É–º\n` +
      `üè™ –§–∏–ª–∏–∞–ª–æ–≤: ${stat.branches.length}\n\n` +
      `üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${
        supplier.statistics.lastSync?.toLocaleString("ru-RU") || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
      }`;

    await this.bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –¥–æ–∫—Ç–æ—Ä–∞
  async handleDoctorMenu(chatId, text, doctor) {
    switch (text) {
      case "üìã –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏":
        await this.showDoctorSales(chatId, doctor._id);
        break;

      case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await this.showDoctorStatistics(chatId, doctor._id);
        break;

      case "‚ûï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞":
        await this.startNewSale(chatId, doctor._id);
        break;

      case "üìà –û—Ç—á–µ—Ç—ã":
        await this.showDoctorReports(chatId, doctor._id);
        break;

      case "‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å":
        await this.showDoctorProfile(chatId, doctor);
        break;

      case "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
        await this.bot.sendMessage(chatId, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
        setTimeout(async () => {
          await this.bot.sendMessage(chatId, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
        }, 1000);
        break;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–∫—Ç–æ—Ä–∞
  async showDoctorSales(chatId, doctorId) {
    const today = new Date();
    const startOfDay = new Date(today.setHours(0, 0, 0, 0));

    const sales = await Sale.find({
      doctor: doctorId,
      saleDate: { $gte: startOfDay },
    })
      .populate("medicines.medicine")
      .sort({ saleDate: -1 })
      .limit(10);

    if (sales.length === 0) {
      return await this.bot.sendMessage(
        chatId,
        "üìã –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂."
      );
    }

    let message = "üìã *–í–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n";
    let totalAmount = 0;

    sales.forEach((sale, index) => {
      message += `${index + 1}. üïí ${sale.saleDate.toLocaleTimeString(
        "ru-RU"
      )}\n`;
      message += `üí∞ –°—É–º–º–∞: ${sale.totalAmount.toLocaleString("ru-RU")} —Å—É–º\n`;
      message += `üì¶ –õ–µ–∫–∞—Ä—Å—Ç–≤–∞:\n`;

      sale.medicines.forEach((item) => {
        message += `   ‚Ä¢ ${item.medicine.name} - ${item.quantity} ${item.medicine.unit}\n`;
      });
      message += "\n";
      totalAmount += sale.totalAmount;
    });

    message += `üìä *–û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString("ru-RU")} —Å—É–º*`;

    await this.bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—Ç–æ—Ä–∞
  async showDoctorStatistics(chatId, doctorId) {
    const today1 = new Date();
    const startOfDay = new Date(today1.setHours(0, 0, 0, 0));
    const startOfWeek = new Date(today1.setDate(today1.getDate() - 7));
    const startOfMonth = new Date(today1.setDate(today1.getDate() - 30));

    const [todayStats, weekStats, monthStats] = await Promise.all([
      Sale.aggregate([
        {
          $match: {
            doctor: doctorId,
            saleDate: { $gte: startOfDay },
          },
        },
        {
          $group: {
            _id: null,
            totalSales: { $sum: 1 },
            totalAmount: { $sum: "$totalAmount" },
          },
        },
      ]),
      Sale.aggregate([
        {
          $match: {
            doctor: doctorId,
            saleDate: { $gte: startOfWeek },
          },
        },
        {
          $group: {
            _id: null,
            totalSales: { $sum: 1 },
            totalAmount: { $sum: "$totalAmount" },
          },
        },
      ]),
      Sale.aggregate([
        {
          $match: {
            doctor: doctorId,
            saleDate: { $gte: startOfMonth },
          },
        },
        {
          $group: {
            _id: null,
            totalSales: { $sum: 1 },
            totalAmount: { $sum: "$totalAmount" },
          },
        },
      ]),
    ]);

    const today = todayStats[0] || { totalSales: 0, totalAmount: 0 };
    const week = weekStats[0] || { totalSales: 0, totalAmount: 0 };
    const month = monthStats[0] || { totalSales: 0, totalAmount: 0 };

    const message =
      `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n` +
      `üìÖ *–°–µ–≥–æ–¥–Ω—è:*\n` +
      `   üõí –ü—Ä–æ–¥–∞–∂: ${today.totalSales}\n` +
      `   üí∞ –°—É–º–º–∞: ${today.totalAmount.toLocaleString("ru-RU")} —Å—É–º\n\n` +
      `üìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n` +
      `   üõí –ü—Ä–æ–¥–∞–∂: ${week.totalSales}\n` +
      `   üí∞ –°—É–º–º–∞: ${week.totalAmount.toLocaleString("ru-RU")} —Å—É–º\n\n` +
      `üìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n` +
      `   üõí –ü—Ä–æ–¥–∞–∂: ${month.totalSales}\n` +
      `   üí∞ –°—É–º–º–∞: ${month.totalAmount.toLocaleString("ru-RU")} —Å—É–º`;

    await this.bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–∫—Ç–æ—Ä–∞
  async showDoctorProfile(chatId, doctor) {
    const message =
      `üë®‚Äç‚öïÔ∏è *–ü—Ä–æ—Ñ–∏–ª—å:*\n\n` +
      `üë§ –ò–º—è: ${doctor.firstName} ${doctor.lastName}\n` +
      `üè• –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${doctor.specialization || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${doctor.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
      `üîë –ö–æ–¥: ${doctor.adminCode}\n` +
      `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${
        doctor.lastLogin
          ? doctor.lastLogin.toLocaleString("ru-RU")
          : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      }\n` +
      `‚úÖ –°—Ç–∞—Ç—É—Å: ${doctor.isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}`;

    await this.bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  start() {
    console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (RU)");
  }
}

module.exports = new PharmacyBotRu();
